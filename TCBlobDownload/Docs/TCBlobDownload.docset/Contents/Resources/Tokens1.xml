<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/TCBlobDownload.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/TCBlobDownload</TokenIdentifier>
			<Abstract type="html">TCBlobDownload is a subclass of Cocoa&apos;s NSOperation. It&apos;s purpose is to be executed by the TCBlobDownloadManager singleton to download large files in background threads.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
            
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/TCBlobDownloadDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate property of a TCBlobDownload instance. Can be nil.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, unsafe_unretained) id&lt;TCBlobDownloadDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/delegate</TokenIdentifier>
			<Abstract type="html">The delegate property of a TCBlobDownload instance. Can be nil.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, unsafe_unretained) id&lt;TCBlobDownloadDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/delegate</TokenIdentifier>
			<Abstract type="html">The delegate property of a TCBlobDownload instance. Can be nil.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, unsafe_unretained) id&lt;TCBlobDownloadDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setPathToDownloadDirectory:</TokenIdentifier>
			<Abstract type="html">The directory where to download the file.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *pathToDownloadDirectory</Declaration>
			
			
			<Anchor>//api/name/pathToDownloadDirectory</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/pathToDownloadDirectory</TokenIdentifier>
			<Abstract type="html">The directory where to download the file.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *pathToDownloadDirectory</Declaration>
			
			
			<Anchor>//api/name/pathToDownloadDirectory</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/pathToDownloadDirectory</TokenIdentifier>
			<Abstract type="html">The directory where to download the file.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy) NSString *pathToDownloadDirectory</Declaration>
			
			
			<Anchor>//api/name/pathToDownloadDirectory</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setPathToFile:</TokenIdentifier>
			<Abstract type="html">The path to the downloaded file, including the file name.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *pathToFile</Declaration>
			
			
			<Anchor>//api/name/pathToFile</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/pathToFile</TokenIdentifier>
			<Abstract type="html">The path to the downloaded file, including the file name.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *pathToFile</Declaration>
			
			
			<Anchor>//api/name/pathToFile</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/pathToFile</TokenIdentifier>
			<Abstract type="html">The path to the downloaded file, including the file name.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSString *pathToFile</Declaration>
			
			
			<Anchor>//api/name/pathToFile</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setDownloadURL:</TokenIdentifier>
			<Abstract type="html">The URL of the file to download.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSURL *downloadURL</Declaration>
			
			
			<Anchor>//api/name/downloadURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/downloadURL</TokenIdentifier>
			<Abstract type="html">The URL of the file to download.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSURL *downloadURL</Declaration>
			
			
			<Anchor>//api/name/downloadURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/downloadURL</TokenIdentifier>
			<Abstract type="html">The URL of the file to download.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, copy, readonly) NSURL *downloadURL</Declaration>
			
			
			<Anchor>//api/name/downloadURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setFileName:</TokenIdentifier>
			<Abstract type="html">The file name, based on the last path component of the download URL.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/TCBlobDownloadDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy, readonly) NSString *fileName</Declaration>
			
			
			<Anchor>//api/name/fileName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/fileName</TokenIdentifier>
			<Abstract type="html">The file name, based on the last path component of the download URL.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/TCBlobDownloadDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy, readonly) NSString *fileName</Declaration>
			
			
			<Anchor>//api/name/fileName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/fileName</TokenIdentifier>
			<Abstract type="html">The file name, based on the last path component of the download URL.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intf/TCBlobDownloadDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, copy, readonly) NSString *fileName</Declaration>
			
			
			<Anchor>//api/name/fileName</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setSpeedRate:</TokenIdentifier>
			<Abstract type="html">The current speed of the download in bits/sec.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger speedRate</Declaration>
			
			
			<Anchor>//api/name/speedRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/speedRate</TokenIdentifier>
			<Abstract type="html">The current speed of the download in bits/sec.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger speedRate</Declaration>
			
			
			<Anchor>//api/name/speedRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/speedRate</TokenIdentifier>
			<Abstract type="html">The current speed of the download in bits/sec.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger speedRate</Declaration>
			
			
			<Anchor>//api/name/speedRate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/setRemainingTime:</TokenIdentifier>
			<Abstract type="html">The estimated number of seconds before the download completes.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger remainingTime</Declaration>
			
			
			<Anchor>//api/name/remainingTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/remainingTime</TokenIdentifier>
			<Abstract type="html">The estimated number of seconds before the download completes.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger remainingTime</Declaration>
			
			
			<Anchor>//api/name/remainingTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/TCBlobDownload/remainingTime</TokenIdentifier>
			<Abstract type="html">The estimated number of seconds before the download completes.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign, readonly) NSInteger remainingTime</Declaration>
			
			
			<Anchor>//api/name/remainingTime</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/initWithURL:downloadPath:delegate:</TokenIdentifier>
			<Abstract type="html">Instanciates a TCBlobDownload object with delegate. TCBlobDownload objects instanciated this way will not be executed until they are passed to the TCBlobDownloadManager singleton.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithURL:(NSURL *)url downloadPath:(NSString *)pathToDLOrNil delegate:(id&lt;TCBlobDownloadDelegate&gt;)delegateOrNil</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL from where to download the file.</Abstract>
				</Parameter><Parameter>
					<Name>pathToDLOrNil</Name>
					<Abstract type="html">An optional path to override the default download path of the TCBlobDownloadManager instance. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>delegateOrNil</Name>
					<Abstract type="html">An optional delegate. Can be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The newly created TCBlobDownload.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithURL:downloadPath:delegate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/initWithURL:downloadPath:firstResponse:progress:error:complete:</TokenIdentifier>
			<Abstract type="html">Instanciates a TCBlobDownload object with response blocks. TCBlobDownload objects instanciated this way will not be executed until they are passed to the TCBlobDownloadManager singleton.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>- (instancetype)initWithURL:(NSURL *)url downloadPath:(NSString *)pathToDL firstResponse:(FirstResponseBlock)firstResponseBlock progress:(ProgressBlock)progressBlock error:(ErrorBlock)errorBlock complete:(CompleteBlock)completeBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL of the file to download.</Abstract>
				</Parameter><Parameter>
					<Name>firstResponseBlock</Name>
					<Abstract type="html">This block is called when receiving the first response from the server. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>progressBlock</Name>
					<Abstract type="html">This block is called on each response from the server while the download is occurring. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>errorBlock</Name>
					<Abstract type="html">Called when an error occur during the download. If this block is called, the download will be cancelled just after. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completeBlock</Name>
					<Abstract type="html">Called when the download is completed. Can be nil.</Abstract>
				</Parameter><Parameter>
					<Name>customPathOrNil</Name>
					<Abstract type="html">An optional path to override the default download path of the TCBlobDownloadManager instance. Can be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The newly created TCBlobDownload.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithURL:downloadPath:firstResponse:progress:error:complete:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/cancelDownloadAndRemoveFile:</TokenIdentifier>
			<Abstract type="html">Cancels the download. Remove already downloaded parts of the file from the disk is asked.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>- (void)cancelDownloadAndRemoveFile:(BOOL)remove</Declaration>
			<Parameters>
				<Parameter>
					<Name>remove</Name>
					<Abstract type="html">If YES, this method will remove the downloaded file parts from the disk. File parts are left untouched if set to NO. This will allow TCBlobDownload to restart the download from where it has ended in a future operation.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/cancelDownloadAndRemoveFile:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/TCBlobDownload/addDependentDownload:</TokenIdentifier>
			<Abstract type="html">Makes the receiver download dependent of the given download. The receiver download will not execute itself until the given download has finished.</Abstract>
			<DeclaredIn>TCBlobDownload.h</DeclaredIn>
			
			<Declaration>- (void)addDependentDownload:(TCBlobDownload *)blobDownload</Declaration>
			<Parameters>
				<Parameter>
					<Name>blobDownload</Name>
					<Abstract type="html">The download on which to depend.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addDependentDownload:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
        
	</File>
</Tokens>